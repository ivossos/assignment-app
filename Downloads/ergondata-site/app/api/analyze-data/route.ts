import { generateText } from "ai"
import { google } from "@ai-sdk/google"

export const maxDuration = 60

export async function POST(req: Request) {
  const { dataStructure, fullData, analysisType } = await req.json()

  if (!dataStructure || !fullData || fullData.length === 0) {
    return Response.json({ error: "Dados insuficientes para an√°lise." }, { status: 400 })
  }

  try {
    const modelDescriptions: Record<string, string> = {
      auto: "Analise automaticamente os dados e escolha o melhor modelo de an√°lise (classifica√ß√£o, regress√£o, clustering, etc.)",
      churn: "Analise os dados para predi√ß√£o de churn/abandono de clientes",
      segmentation: "Realize segmenta√ß√£o de clientes baseada em comportamento e caracter√≠sticas",
      forecast: "Fa√ßa previs√£o de vendas e tend√™ncias futuras",
      anomaly: "Detecte anomalias e padr√µes incomuns nos dados",
      clustering: "Agrupe dados similares usando t√©cnicas de clustering",
    }

    const modelInstruction = modelDescriptions[analysisType] || modelDescriptions.auto

    const { text } = await generateText({
      model: google("gemini-2.0-flash-exp"),
      prompt: `Voc√™ √© um Cientista de Dados especialista da Ergondata. ${modelInstruction}

ESTRUTURA DOS DADOS:
- Total de Registros: ${dataStructure.totalRows}
- Colunas: ${dataStructure.columns.join(", ")}
- Tipos de Dados: ${JSON.stringify(dataStructure.columnTypes, null, 2)}

AMOSTRA DOS DADOS (primeiras 5 linhas):
${JSON.stringify(dataStructure.sampleData, null, 2)}

DADOS COMPLETOS PARA AN√ÅLISE:
${JSON.stringify(fullData.slice(0, 100), null, 2)}

Realize uma an√°lise COMPLETA e DETALHADA seguindo esta estrutura:

# üìä DASHBOARD DE AN√ÅLISE DE DADOS

## 1. RESUMO EXECUTIVO
- Vis√£o geral dos dados
- Principais descobertas (Top 3)
- Recomenda√ß√µes imediatas

## 2. AN√ÅLISE EXPLORAT√ìRIA DE DADOS (EDA)

### 2.1 Estat√≠sticas Descritivas
- Distribui√ß√µes das vari√°veis num√©ricas
- Frequ√™ncias das vari√°veis categ√≥ricas
- Valores faltantes identificados

### 2.2 Correla√ß√µes e Relacionamentos
- Correla√ß√µes entre vari√°veis
- Padr√µes identificados
- Vari√°veis mais importantes

## 3. MODELO RECOMENDADO

### 3.1 Escolha do Modelo
- Por que este modelo √© ideal para estes dados
- Algoritmos sugeridos (ex: XGBoost, Random Forest, K-Means, LSTM)
- M√©tricas de avalia√ß√£o apropriadas

### 3.2 Features Engineering
- Vari√°veis a criar/transformar
- Tratamento de outliers
- Normaliza√ß√£o/Padroniza√ß√£o necess√°ria

## 4. INSIGHTS DE NEG√ìCIO

### 4.1 Descobertas Chave
- Padr√µes de comportamento
- Segmentos identificados
- Tend√™ncias temporais (se aplic√°vel)

### 4.2 Oportunidades
- √Åreas de melhoria
- Potencial de otimiza√ß√£o
- Quick wins

### 4.3 Riscos Identificados
- Alertas de anomalias
- Pontos de aten√ß√£o
- A√ß√µes preventivas

## 5. IMPLEMENTA√á√ÉO SUGERIDA

### 5.1 Pipeline de ML
\`\`\`python
# Exemplo de c√≥digo para implementa√ß√£o
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# Pr√©-processamento
# Treinamento
# Avalia√ß√£o
\`\`\`

### 5.2 Pr√≥ximos Passos
1. Coleta de dados adicionais (se necess√°rio)
2. Implementa√ß√£o do modelo
3. Monitoramento e valida√ß√£o
4. Deploy em produ√ß√£o

## 6. M√âTRICAS DE SUCESSO
- KPIs principais para acompanhar
- Metas sugeridas
- ROI esperado

## 7. VISUALIZA√á√ïES RECOMENDADAS
- Gr√°ficos essenciais para dashboard
- Tipos de visualiza√ß√£o (barras, linhas, dispers√£o, heatmap)
- Ferramentas sugeridas (Tableau, PowerBI, Plotly)

Seja ESPEC√çFICO, T√âCNICO e ACION√ÅVEL. Use dados reais da an√°lise, n√£o exemplos gen√©ricos.`,
      maxOutputTokens: 4000,
      temperature: 0.7,
    })

    return Response.json({ analysis: text })
  } catch (error) {
    console.error("[v0] Error analyzing data:", error)
    return Response.json({ error: "Erro ao analisar dados. Tente novamente." }, { status: 500 })
  }
}
